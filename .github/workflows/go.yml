name: Go Cross-Platform Build and Release
on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: false

    - name: Install dependencies
      run: go mod download

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: linux-amd64

          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            suffix: linux-arm64

          - os: macos-latest
            goos: darwin
            goarch: amd64
            suffix: darwin-amd64

          - os: macos-latest
            goos: darwin
            goarch: arm64
            suffix: darwin-arm64

          - os: windows-latest
            goos: windows
            goarch: amd64
            suffix: windows-amd64
            ext: .exe

          - os: windows-latest
            goos: windows
            goarch: 386
            suffix: windows-x86
            ext: .exe

    runs-on: ${{ matrix.os }}

    environment:
      name: actions-workflow

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false

    - name: Build Binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go mod download
        go build -v -o x-yapper-${{ matrix.suffix }}${{ matrix.ext }} ./cmd/x-yapper

    - name: Import GPG Key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        echo -e "passphrase=$GPG_PASSPHRASE\n" > ~/.gnupg/gpg.conf
        chmod 600 ~/.gnupg/gpg.conf

    - name: Sign Binary
      run: |
        gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --armor --detach-sign --output x-yapper-${{ matrix.suffix }}${{ matrix.ext }}.asc x-yapper-${{ matrix.suffix }}${{ matrix.ext }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: x-yapper-${{ matrix.suffix }}
        path: |
          x-yapper-${{ matrix.suffix }}${{ matrix.ext }}
          x-yapper-${{ matrix.suffix }}${{ matrix.ext }}.asc
          ./keys/x-yapper-cross-platform-public-key.asc

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: |
          x-yapper-${{ matrix.suffix }}${{ matrix.ext }}
          x-yapper-${{ matrix.suffix }}${{ matrix.ext }}.asc
        generate_release_notes: true

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

    - name: Go Vet
      run: go vet ./...
